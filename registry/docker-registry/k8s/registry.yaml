#@ load("@ytt:data", "data")
#@ load("@ytt:base64", "base64")

#@ def labels():
app: #@ data.values.labels.app
org: #@ data.values.labels.org
#@ end

---
apiVersion: v1
kind: Namespace
metadata:
  name: #@ data.values.namespace
  labels: #@ labels()
---
apiVersion: v1
kind: Secret
metadata:
  name: #@ "{}-secret".format(data.values.name)
  namespace: #@ data.values.namespace
  labels: #@ labels()
type: Opaque
data:
  htpasswd: #@ base64.encode(data.values.secrets.htpasswd)
  haSharedSecret: #@ base64.encode(data.values.secrets.hashared)
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: #@ "{}-config".format(data.values.name)
  namespace: #@ data.values.namespace
  labels: #@ labels()
data:
  config.yml: |-
    health:
      storagedriver:
        enabled: true
        interval: 10s
        threshold: 3
    http:
      addr: :5000
      headers:
        X-Content-Type-Options:
        - nosniff
    log:
      fields:
        service: registry
    storage:
      cache:
        blobdescriptor: inmemory
    version: 0.1
---
apiVersion: v1
kind: Service
metadata:
  name: #@ (data.values.name)
  namespace: #@ data.values.namespace
  labels: #@ labels()
spec:
  type: ClusterIP
  ports:
    - port: 5000
      protocol: TCP
      name: registry
      targetPort: 5000
  selector:
    app: #@ (data.values.name)
    release: #@ (data.values.name)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: #@ (data.values.name)
  namespace: #@ data.values.namespace
  labels: #@ labels()
spec:
  selector:
    matchLabels:
      app: #@ (data.values.name)
      release: #@ (data.values.name)
  replicas: 1
  minReadySeconds: 5
  template:
    metadata:
      labels:
        app: #@ (data.values.name)
        release: #@ (data.values.name)
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      containers:
        - name: #@ (data.values.name)
          image: "registry:2.7.1"
          imagePullPolicy: IfNotPresent
          command:
          - /bin/registry
          - serve
          - /etc/docker/registry/config.yml
          ports:
            - containerPort: 5000
          livenessProbe:
            httpGet:
              path: /
              port: 5000
          readinessProbe:
            httpGet:
              path: /
              port: 5000
          resources:
            {}
          env:
            - name: REGISTRY_AUTH
              value: "htpasswd"
            - name: REGISTRY_AUTH_HTPASSWD_REALM
              value: "Registry Realm"
            - name: REGISTRY_AUTH_HTPASSWD_PATH
              value: "/auth/htpasswd"
            - name: REGISTRY_HTTP_SECRET
              valueFrom:
                secretKeyRef:
                  name: #@ "{}-secret".format(data.values.name)
                  key: haSharedSecret
            - name: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY
              value: "/var/lib/registry"
          volumeMounts:
            - name: auth
              mountPath: /auth
              readOnly: true
            - name: data
              mountPath: /var/lib/registry/
            - name: #@ "{}-config".format(data.values.name)
              mountPath: "/etc/docker/registry"
      volumes:
        - name: auth
          secret:
            secretName: #@ "{}-secret".format(data.values.name)
            items:
            - key: htpasswd
              path: htpasswd
        - name: data
          emptyDir: {}
        - name: #@ "{}-config".format(data.values.name)
          configMap:
            name: #@ "{}-config".format(data.values.name)
---
#@ if data.values.insecure_route:
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: 200m
  name: docker-registry
  namespace: default
spec:
  rules:
  - host: registry.failk8s.dev
    http:
      paths:
      - backend:
          serviceName: docker-registry
          servicePort: 5000
        path: /
---
#@ end