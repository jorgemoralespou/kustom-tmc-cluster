#@ load("@ytt:data", "data")

#@ def labels():
app: #@ data.values.labels.app
org: #@ data.values.labels.org
#@ end

---
apiVersion: v1
kind: Namespace
metadata:
  name: #@ data.values.namespace
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: #@ "{}-cainjector".format(data.values.name)
  namespace: #@ data.values.namespace
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: #@ data.values.name
  namespace: #@ data.values.namespace
  annotations:
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: #@ "{}-webhook".format(data.values.name)
  namespace: #@ data.values.namespace
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: #@ "{}-cainjector".format(data.values.name)
rules:
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["get", "create", "update", "patch"]
  - apiGroups: ["admissionregistration.k8s.io"]
    resources: ["validatingwebhookconfigurations", "mutatingwebhookconfigurations"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["apiregistration.k8s.io"]
    resources: ["apiservices"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["get", "list", "watch", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: #@ "{}-controller-issuers".format(data.values.name)
rules:
  - apiGroups: ["cert-manager.io"]
    resources: ["issuers", "issuers/status"]
    verbs: ["update"]
  - apiGroups: ["cert-manager.io"]
    resources: ["issuers"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch", "create", "update", "delete"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: #@ "{}-controller-clusterissuers".format(data.values.name)
rules:
  - apiGroups: ["cert-manager.io"]
    resources: ["clusterissuers", "clusterissuers/status"]
    verbs: ["update"]
  - apiGroups: ["cert-manager.io"]
    resources: ["clusterissuers"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch", "create", "update", "delete"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: #@ "{}-controller-certificates".format(data.values.name)
rules:
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates", "certificates/status", "certificaterequests", "certificaterequests/status"]
    verbs: ["update"]
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates", "certificaterequests", "clusterissuers", "issuers"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates/finalizers", "certificaterequests/finalizers"]
    verbs: ["update"]
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["orders"]
    verbs: ["create", "delete", "get", "list", "watch"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch", "create", "update", "delete"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: #@ "{}-controller-orders".format(data.values.name)
rules:
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["orders", "orders/status"]
    verbs: ["update"]
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["orders", "challenges"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["cert-manager.io"]
    resources: ["clusterissuers", "issuers"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["challenges"]
    verbs: ["create", "delete"]
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["orders/finalizers"]
    verbs: ["update"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: #@ "{}-controller-challenges".format(data.values.name)
rules:
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["challenges", "challenges/status"]
    verbs: ["update"]
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["challenges"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["cert-manager.io"]
    resources: ["issuers", "clusterissuers"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
  - apiGroups: [""]
    resources: ["pods", "services"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: ["extensions"]
    resources: ["ingresses"]
    verbs: ["get", "list", "watch", "create", "delete", "update"]
  - apiGroups: ["route.openshift.io"]
    resources: ["routes/custom-host"]
    verbs: ["create"]
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["challenges/finalizers"]
    verbs: ["update"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: #@ "{}-controller-ingress-shim".format(data.values.name)
rules:
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates", "certificaterequests"]
    verbs: ["create", "update", "delete"]
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates", "certificaterequests", "issuers", "clusterissuers"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["extensions"]
    resources: ["ingresses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["extensions"]
    resources: ["ingresses/finalizers"]
    verbs: ["update"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: #@ data.values.name + "-view"
  labels:
    rbac.authorization.k8s.io/aggregate-to-view: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
rules:
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates", "certificaterequests", "issuers"]
    verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: #@ data.values.name + "-edit"
  labels:
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
rules:
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates", "certificaterequests", "issuers"]
    verbs: ["create", "delete", "deletecollection", "patch", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: #@ data.values.name + "-webhook:webhook-requester"
rules:
- apiGroups:
  - admission.cert-manager.io
  resources:
  - certificates
  - certificaterequests
  - issuers
  - clusterissuers
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: #@ "{}-cainjector".format(data.values.name)
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: #@ "{}-cainjector".format(data.values.name)
subjects:
  - name: #@ "{}-cainjector".format(data.values.name)
    namespace: #@ data.values.namespace
    kind: ServiceAccount
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: #@ "{}-controller-issuers".format(data.values.name)
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: #@ "{}-controller-issuers".format(data.values.name)
subjects:
  - name: #@ data.values.name
    namespace: #@ data.values.namespace
    kind: ServiceAccount
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: #@ "{}-controller-clusterissuers".format(data.values.name)
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: #@ "{}-controller-clusterissuers".format(data.values.name)
subjects:
  - name: #@ data.values.name
    namespace: #@ data.values.namespace
    kind: ServiceAccount
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: #@ "{}-controller-certificates".format(data.values.name)
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: #@ "{}-controller-certificates".format(data.values.name)
subjects:
  - name: #@ data.values.name
    namespace: #@ data.values.namespace
    kind: ServiceAccount
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: #@ "{}-controller-orders".format(data.values.name)
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: #@ "{}-controller-orders".format(data.values.name)
subjects:
  - name: #@ data.values.name
    namespace: #@ data.values.namespace
    kind: ServiceAccount
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: #@ "{}-controller-challenges".format(data.values.name)
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: #@ "{}-controller-challenges".format(data.values.name)
subjects:
  - name: #@ data.values.name
    namespace: #@ data.values.namespace
    kind: ServiceAccount
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: #@ "{}-controller-ingress-shim".format(data.values.name)
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: #@ "{}-controller-ingress-shim".format(data.values.name)
subjects:
  - name: #@ data.values.name
    namespace: #@ data.values.namespace
    kind: ServiceAccount
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: #@ data.values.name + "-webhook:auth-delegator"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- apiGroup: ""
  kind: ServiceAccount
  name: #@ "{}-webhook".format(data.values.name)
  namespace: #@ data.values.namespace
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: #@ "{}-cainjector:leaderelection".format(data.values.name)
  namespace: kube-system
rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "create", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: #@ "{}:leaderelection".format(data.values.name)
  namespace: kube-system
rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "create", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: #@ "{}-cainjector:leaderelection".format(data.values.name)
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: #@ "{}-cainjector:leaderelection".format(data.values.name)
subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: #@ "{}-cainjector".format(data.values.name)
    namespace: #@ data.values.namespace
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: #@ "{}:leaderelection".format(data.values.name)
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: #@ "{}:leaderelection".format(data.values.name)
subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: #@ data.values.name
    namespace: #@ data.values.namespace
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: #@ data.values.name + "-webhook:webhook-authentication-reader"
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- apiGroup: ""
  kind: ServiceAccount
  name: #@ "{}-webhook".format(data.values.name)
  namespace: #@ data.values.namespace
---
apiVersion: v1
kind: Service
metadata:
  name: #@ data.values.name
  namespace: #@ data.values.namespace
spec:
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 9402
      targetPort: 9402
  selector:
    app.kubernetes.io/name: #@ data.values.name
    app.kubernetes.io/instance: #@ data.values.name
---
apiVersion: v1
kind: Service
metadata:
  name: #@ "{}-webhook".format(data.values.name)
  namespace: #@ data.values.namespace
spec:
  type: ClusterIP
  ports:
  - name: https
    port: 443
    targetPort: 10250
  selector:
    app: webhook
    app.kubernetes.io/name: webhook
    app.kubernetes.io/instance: #@ data.values.name
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: #@ "privileged-{}-webhook".format(data.values.name)
  namespace: #@ data.values.namespace
  labels: #@ labels()
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: #@ data.values.privileged_clusterrole_name
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: User
  name: #@ "system:serviceaccount:{}:{}-webhook".format(data.values.namespace,data.values.name)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: #@ "{}-cainjector".format(data.values.name)
  namespace: #@ data.values.namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cainjector
      app.kubernetes.io/name: cainjector
      app.kubernetes.io/instance: #@ data.values.name
  template:
    metadata:
      labels:
        app: cainjector
        app.kubernetes.io/name: cainjector
        app.kubernetes.io/instance: #@ data.values.name
      annotations:
    spec:
      serviceAccountName: #@ "{}-cainjector".format(data.values.name)
      containers:
        - name: cert-manager
          image: "quay.io/jetstack/cert-manager-cainjector:v0.14.0"
          imagePullPolicy: IfNotPresent
          args:
          - --v=2
          - --leader-election-namespace=kube-system
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          resources:
            {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: #@ data.values.name
  namespace: #@ data.values.namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: #@ data.values.name
      app.kubernetes.io/name: #@ data.values.name
      app.kubernetes.io/instance: #@ data.values.name
  template:
    metadata:
      labels:
        app: #@ data.values.name
        app.kubernetes.io/name: #@ data.values.name
        app.kubernetes.io/instance: #@ data.values.name
      annotations:
        prometheus.io/path: "/metrics"
        prometheus.io/scrape: 'true'
        prometheus.io/port: '9402'
    spec:
      serviceAccountName: #@ data.values.name
      containers:
        - name: cert-manager
          image: "quay.io/jetstack/cert-manager-controller:v0.14.0"
          imagePullPolicy: IfNotPresent
          args:
          - --v=2
          - --cluster-resource-namespace=$(POD_NAMESPACE)
          - --leader-election-namespace=kube-system
          - --webhook-namespace=$(POD_NAMESPACE)
          - --webhook-ca-secret=$(APPNAME)-webhook-ca
          - --webhook-serving-secret=$(APPNAME)-webhook-tls
          - --webhook-dns-names=$(APPNAME)-webhook,$(APPNAME)-webhook.$(POD_NAMESPACE),$(APPNAME)-webhook.$(POD_NAMESPACE).svc
          ports:
          - containerPort: 9402
            protocol: TCP
          env:
          - name: APPNAME
            value: #@ data.values.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          resources:
            {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: #@ "{}-webhook".format(data.values.name)
  namespace: #@ data.values.namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: webhook
      app.kubernetes.io/name: webhook
      app.kubernetes.io/instance: #@ data.values.name
  template:
    metadata:
      labels:
        app: webhook
        app.kubernetes.io/name: webhook
        app.kubernetes.io/instance: #@ data.values.name
      annotations:
    spec:
      serviceAccountName: #@ "{}-webhook".format(data.values.name)
      containers:
        - name: cert-manager
          image: "quay.io/jetstack/cert-manager-webhook:v0.14.0"
          imagePullPolicy: IfNotPresent
          args:
          - --v=2
          - --secure-port=10250
          - --tls-cert-file=/certs/tls.crt
          - --tls-private-key-file=/certs/tls.key
          livenessProbe:
            httpGet:
              path: /livez
              port: 6080
              scheme: HTTP
          readinessProbe:
            httpGet:
              path: /healthz
              port: 6080
              scheme: HTTP
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          resources:
            {}
          volumeMounts:
          - name: certs
            mountPath: /certs
      volumes:
      - name: certs
        secret:
          secretName: #@ "{}-webhook-tls".format(data.values.name)
---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingWebhookConfiguration
metadata:
  name: #@ "{}-webhook".format(data.values.name)
  annotations:
    cert-manager.io/inject-ca-from-secret: #@ "{}/{}-webhook-tls".format(data.values.namespace,data.values.name)
webhooks:
  - name: webhook.cert-manager.io
    rules:
      - apiGroups:
          - "cert-manager.io"
          - "acme.cert-manager.io"
        apiVersions:
          - v1alpha2
        operations:
          - CREATE
          - UPDATE
        resources:
          - "*/*"
    failurePolicy: Fail
    sideEffects: None
    clientConfig:
      service:
        name: #@ "{}-webhook".format(data.values.name)
        namespace: #@ data.values.namespace
        path: /mutate
---
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  name: #@ "{}-webhook".format(data.values.name)
  annotations:
    cert-manager.io/inject-ca-from-secret: #@ "{}/{}-webhook-tls".format(data.values.namespace,data.values.name)
webhooks:
  - name: webhook.cert-manager.io
    namespaceSelector:
      matchExpressions:
      - key: "cert-manager.io/disable-validation"
        operator: "NotIn"
        values:
        - "true"
      - key: "name"
        operator: "NotIn"
        values:
        - #@ data.values.name
    rules:
      - apiGroups:
          - "cert-manager.io"
          - "acme.cert-manager.io"
        apiVersions:
          - v1alpha2
        operations:
          - CREATE
          - UPDATE
        resources:
          - "*/*"
    failurePolicy: Fail
    sideEffects: None
    clientConfig:
      service:
        name: #@ "{}-webhook".format(data.values.name)
        namespace: #@ data.values.namespace
        path: /mutate