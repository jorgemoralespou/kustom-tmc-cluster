
#@ load("@ytt:data", "data")

#@ def labels():
app: #@ data.values.labels.app
org: #@ data.values.labels.org
#@ end

--- 

apiVersion: apps/v1
kind: Deployment
metadata:
  labels: #@ labels()
  name: #@ data.values.name
  namespace: #@ data.values.namespace
spec:
  replicas: 1
  selector:
    matchLabels:
      deployment: #@ data.values.name
  template:
    metadata:
      labels: 
        deployment: #@ data.values.name
    spec:
      containers:
      - image: quay.io/jorgemoralespou/eduk8shub:latest
        imagePullPolicy: Always
        name: eduk8s-hub
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        ports:
        - containerPort: 8080
        resources:
          requests:
            memory: "64Mi"
            cpu: "500m"
          limits:
            memory: "512Mi"
            cpu: "500m"
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30

--- 

apiVersion: v1
kind: Service
metadata:
  labels: #@ labels()
  name: #@ data.values.name
  namespace: #@ data.values.namespace
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 8080
  selector:
    #@Â labels()
    deployment: #@ data.values.name
  type: LoadBalancer

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    #@ if/end bool(data.values.secure) == True:
    cert-manager.io/issuer: #@ "letsencrypt-prod-{}".format(data.values.name)
  labels: #@ labels()
  name: #@ data.values.name
  namespace: #@ data.values.namespace
spec:
  rules:
  - host: #@ data.values.host
    http:
      paths:
      - backend:
          serviceName: #@ data.values.name
          servicePort: 8080
#@ if bool(data.values.secure) == True:
  tls:
  - hosts:
    - #@ data.values.host
    secretName: #@ data.values.ingress.secret
#@ end

#@ if data.values.secure==True and data.values.ingress.use_certmanager==True:
---

apiVersion: cert-manager.io/v1alpha2
kind: Issuer
metadata:
  labels: #@ labels()
  name: #@ "letsencrypt-prod-{}".format(data.values.name)
  namespace: #@ data.values.namespace
spec:
  acme:
    email: #@ data.values.issuer.email
    privateKeySecretRef:
      name: #@ "letsencrypt-prod-{}".format(data.values.name)
    server: #@ data.values.issuer.acme_server
    solvers:
    - http01:
        ingress:
          class: #@ data.values.issuer.ingressclass
#@ end